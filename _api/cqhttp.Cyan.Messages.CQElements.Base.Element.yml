### YamlMime:ManagedReference
items:
- uid: cqhttp.Cyan.Messages.CQElements.Base.Element
  commentId: T:cqhttp.Cyan.Messages.CQElements.Base.Element
  id: Element
  parent: cqhttp.Cyan.Messages.CQElements.Base
  children:
  - cqhttp.Cyan.Messages.CQElements.Base.Element.#ctor
  - cqhttp.Cyan.Messages.CQElements.Base.Element.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  - cqhttp.Cyan.Messages.CQElements.Base.Element.#ctor(System.String,System.ValueTuple{System.String,System.String}[])
  - cqhttp.Cyan.Messages.CQElements.Base.Element.data
  - cqhttp.Cyan.Messages.CQElements.Base.Element.raw_data_cq
  - cqhttp.Cyan.Messages.CQElements.Base.Element.raw_data_json
  - cqhttp.Cyan.Messages.CQElements.Base.Element.type
  langs:
  - csharp
  - vb
  name: Element
  nameWithType: Element
  fullName: cqhttp.Cyan.Messages.CQElements.Base.Element
  type: Class
  source:
    remote:
      path: src/Messages/CQElements/Base/BaseElement.cs
      branch: master
      repo: https://github.com/frankli0324/cqhttp.Cyan.git
    id: Element
    path: src/Messages/CQElements/Base/BaseElement.cs
    startLine: 9
  assemblies:
  - cqhttp.Cyan
  namespace: cqhttp.Cyan.Messages.CQElements.Base
  summary: "\n消息元素，即cqhttp所定义的消息段\n"
  remarks: "\nshould NEVER be constructed or used directly\n"
  example: []
  syntax:
    content: public class Element
    content.vb: Public Class Element
  inheritance:
  - System.Object
  derivedClasses:
  - cqhttp.Cyan.Messages.CQElements.Base.ElementFile
  - cqhttp.Cyan.Messages.CQElements.ElementEmoji
  - cqhttp.Cyan.Messages.CQElements.ElementFace
  - cqhttp.Cyan.Messages.CQElements.ElementShake
  - cqhttp.Cyan.Messages.CQElements.ElementText
  - src.Messages.CQElements.ElementAt
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: cqhttp.Cyan.Messages.CQElements.Base.Element.type
  commentId: P:cqhttp.Cyan.Messages.CQElements.Base.Element.type
  id: type
  parent: cqhttp.Cyan.Messages.CQElements.Base.Element
  langs:
  - csharp
  - vb
  name: type
  nameWithType: Element.type
  fullName: cqhttp.Cyan.Messages.CQElements.Base.Element.type
  type: Property
  source:
    remote:
      path: src/Messages/CQElements/Base/BaseElement.cs
      branch: master
      repo: https://github.com/frankli0324/cqhttp.Cyan.git
    id: type
    path: src/Messages/CQElements/Base/BaseElement.cs
    startLine: 13
  assemblies:
  - cqhttp.Cyan
  namespace: cqhttp.Cyan.Messages.CQElements.Base
  summary: "\n消息段类型\n"
  example: []
  syntax:
    content: public string type { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property type As String
  overload: cqhttp.Cyan.Messages.CQElements.Base.Element.type*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: cqhttp.Cyan.Messages.CQElements.Base.Element.data
  commentId: P:cqhttp.Cyan.Messages.CQElements.Base.Element.data
  id: data
  parent: cqhttp.Cyan.Messages.CQElements.Base.Element
  langs:
  - csharp
  - vb
  name: data
  nameWithType: Element.data
  fullName: cqhttp.Cyan.Messages.CQElements.Base.Element.data
  type: Property
  source:
    remote:
      path: src/Messages/CQElements/Base/BaseElement.cs
      branch: master
      repo: https://github.com/frankli0324/cqhttp.Cyan.git
    id: data
    path: src/Messages/CQElements/Base/BaseElement.cs
    startLine: 17
  assemblies:
  - cqhttp.Cyan
  namespace: cqhttp.Cyan.Messages.CQElements.Base
  summary: "\nrepresents the true message \n"
  example: []
  syntax:
    content: public virtual Dictionary<string, string> data { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
    content.vb: Public Overridable ReadOnly Property data As Dictionary(Of String, String)
  overload: cqhttp.Cyan.Messages.CQElements.Base.Element.data*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: cqhttp.Cyan.Messages.CQElements.Base.Element.raw_data_cq
  commentId: P:cqhttp.Cyan.Messages.CQElements.Base.Element.raw_data_cq
  id: raw_data_cq
  parent: cqhttp.Cyan.Messages.CQElements.Base.Element
  langs:
  - csharp
  - vb
  name: raw_data_cq
  nameWithType: Element.raw_data_cq
  fullName: cqhttp.Cyan.Messages.CQElements.Base.Element.raw_data_cq
  type: Property
  source:
    remote:
      path: src/Messages/CQElements/Base/BaseElement.cs
      branch: master
      repo: https://github.com/frankli0324/cqhttp.Cyan.git
    id: raw_data_cq
    path: src/Messages/CQElements/Base/BaseElement.cs
    startLine: 25
  assemblies:
  - cqhttp.Cyan
  namespace: cqhttp.Cyan.Messages.CQElements.Base
  summary: "\nbuilds the value when constructing CQCode\n<see>https://d.cqp.me/Pro/CQ%E7%A0%81</see>\n<xref href=\"cqhttp.Cyan.Messages.CQElements.ElementText\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public string raw_data_cq { get; }
    parameters: []
    return:
      type: System.String
      description: CQCode
    content.vb: Public ReadOnly Property raw_data_cq As String
  overload: cqhttp.Cyan.Messages.CQElements.Base.Element.raw_data_cq*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: cqhttp.Cyan.Messages.CQElements.Base.Element.raw_data_json
  commentId: P:cqhttp.Cyan.Messages.CQElements.Base.Element.raw_data_json
  id: raw_data_json
  parent: cqhttp.Cyan.Messages.CQElements.Base.Element
  langs:
  - csharp
  - vb
  name: raw_data_json
  nameWithType: Element.raw_data_json
  fullName: cqhttp.Cyan.Messages.CQElements.Base.Element.raw_data_json
  type: Property
  source:
    remote:
      path: src/Messages/CQElements/Base/BaseElement.cs
      branch: master
      repo: https://github.com/frankli0324/cqhttp.Cyan.git
    id: raw_data_json
    path: src/Messages/CQElements/Base/BaseElement.cs
    startLine: 43
  assemblies:
  - cqhttp.Cyan
  namespace: cqhttp.Cyan.Messages.CQElements.Base
  summary: "\nbuilds the value when constructing EXTENDED CQCode\n<see>https://cqhttp.cc/docs/4.6/#/Message</see>\n"
  example: []
  syntax:
    content: public string raw_data_json { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property raw_data_json As String
  overload: cqhttp.Cyan.Messages.CQElements.Base.Element.raw_data_json*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: cqhttp.Cyan.Messages.CQElements.Base.Element.#ctor
  commentId: M:cqhttp.Cyan.Messages.CQElements.Base.Element.#ctor
  id: '#ctor'
  parent: cqhttp.Cyan.Messages.CQElements.Base.Element
  langs:
  - csharp
  - vb
  name: Element()
  nameWithType: Element.Element()
  fullName: cqhttp.Cyan.Messages.CQElements.Base.Element.Element()
  type: Constructor
  source:
    remote:
      path: src/Messages/CQElements/Base/BaseElement.cs
      branch: master
      repo: https://github.com/frankli0324/cqhttp.Cyan.git
    id: .ctor
    path: src/Messages/CQElements/Base/BaseElement.cs
    startLine: 55
  assemblies:
  - cqhttp.Cyan
  namespace: cqhttp.Cyan.Messages.CQElements.Base
  summary: "\n请勿调用默认构造函数\n"
  example: []
  syntax:
    content: protected Element()
    content.vb: Protected Sub New
  overload: cqhttp.Cyan.Messages.CQElements.Base.Element.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: cqhttp.Cyan.Messages.CQElements.Base.Element.#ctor(System.String,System.ValueTuple{System.String,System.String}[])
  commentId: M:cqhttp.Cyan.Messages.CQElements.Base.Element.#ctor(System.String,System.ValueTuple{System.String,System.String}[])
  id: '#ctor(System.String,System.ValueTuple{System.String,System.String}[])'
  parent: cqhttp.Cyan.Messages.CQElements.Base.Element
  langs:
  - csharp
  - vb
  name: Element(String, (String key, String value)[])
  nameWithType: Element.Element(String, (String key, String value)[])
  fullName: cqhttp.Cyan.Messages.CQElements.Base.Element.Element(System.String, System.ValueTuple<System.String, System.String>[])
  type: Constructor
  source:
    remote:
      path: src/Messages/CQElements/Base/BaseElement.cs
      branch: master
      repo: https://github.com/frankli0324/cqhttp.Cyan.git
    id: .ctor
    path: src/Messages/CQElements/Base/BaseElement.cs
    startLine: 63
  assemblies:
  - cqhttp.Cyan
  namespace: cqhttp.Cyan.Messages.CQElements.Base
  summary: "\n手动构造一个消息段，一般用不到\n"
  example: []
  syntax:
    content: public Element(string type, params (string key, string value)[] dict)
    parameters:
    - id: type
      type: System.String
      description: 消息段类型
    - id: dict
      type: System.ValueTuple{System.String,System.String}[]
      description: 手动输入的键值对
    content.vb: Public Sub New(type As String, ParamArray dict As(key As String, value As String)())
  overload: cqhttp.Cyan.Messages.CQElements.Base.Element.#ctor*
  nameWithType.vb: Element.Element(String, (key As String, value As String)())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: cqhttp.Cyan.Messages.CQElements.Base.Element.Element(System.String, System.ValueTuple(Of System.String, System.String)())
  name.vb: Element(String, (key As String, value As String)())
- uid: cqhttp.Cyan.Messages.CQElements.Base.Element.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:cqhttp.Cyan.Messages.CQElements.Base.Element.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  id: '#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})'
  parent: cqhttp.Cyan.Messages.CQElements.Base.Element
  langs:
  - csharp
  - vb
  name: Element(String, Dictionary<String, String>)
  nameWithType: Element.Element(String, Dictionary<String, String>)
  fullName: cqhttp.Cyan.Messages.CQElements.Base.Element.Element(System.String, System.Collections.Generic.Dictionary<System.String, System.String>)
  type: Constructor
  source:
    remote:
      path: src/Messages/CQElements/Base/BaseElement.cs
      branch: master
      repo: https://github.com/frankli0324/cqhttp.Cyan.git
    id: .ctor
    path: src/Messages/CQElements/Base/BaseElement.cs
    startLine: 74
  assemblies:
  - cqhttp.Cyan
  namespace: cqhttp.Cyan.Messages.CQElements.Base
  summary: "\n构造消息段，一般不会手动调用\n"
  example: []
  syntax:
    content: public Element(string type, Dictionary<string, string> dict)
    parameters:
    - id: type
      type: System.String
      description: 消息段类型
    - id: dict
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: 消息段键值对
    content.vb: Public Sub New(type As String, dict As Dictionary(Of String, String))
  overload: cqhttp.Cyan.Messages.CQElements.Base.Element.#ctor*
  nameWithType.vb: Element.Element(String, Dictionary(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: cqhttp.Cyan.Messages.CQElements.Base.Element.Element(System.String, System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: Element(String, Dictionary(Of String, String))
references:
- uid: cqhttp.Cyan.Messages.CQElements.Base
  commentId: N:cqhttp.Cyan.Messages.CQElements.Base
  name: cqhttp.Cyan.Messages.CQElements.Base
  nameWithType: cqhttp.Cyan.Messages.CQElements.Base
  fullName: cqhttp.Cyan.Messages.CQElements.Base
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: cqhttp.Cyan.Messages.CQElements.Base.Element.type*
  commentId: Overload:cqhttp.Cyan.Messages.CQElements.Base.Element.type
  name: type
  nameWithType: Element.type
  fullName: cqhttp.Cyan.Messages.CQElements.Base.Element.type
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: cqhttp.Cyan.Messages.CQElements.Base.Element.data*
  commentId: Overload:cqhttp.Cyan.Messages.CQElements.Base.Element.data
  name: data
  nameWithType: Element.data
  fullName: cqhttp.Cyan.Messages.CQElements.Base.Element.data
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: cqhttp.Cyan.Messages.CQElements.ElementText
  commentId: T:cqhttp.Cyan.Messages.CQElements.ElementText
  name: ElementText
  nameWithType: ElementText
  fullName: cqhttp.Cyan.Messages.CQElements.ElementText
- uid: cqhttp.Cyan.Messages.CQElements.Base.Element.raw_data_cq*
  commentId: Overload:cqhttp.Cyan.Messages.CQElements.Base.Element.raw_data_cq
  name: raw_data_cq
  nameWithType: Element.raw_data_cq
  fullName: cqhttp.Cyan.Messages.CQElements.Base.Element.raw_data_cq
- uid: cqhttp.Cyan.Messages.CQElements.Base.Element.raw_data_json*
  commentId: Overload:cqhttp.Cyan.Messages.CQElements.Base.Element.raw_data_json
  name: raw_data_json
  nameWithType: Element.raw_data_json
  fullName: cqhttp.Cyan.Messages.CQElements.Base.Element.raw_data_json
- uid: cqhttp.Cyan.Messages.CQElements.Base.Element.#ctor*
  commentId: Overload:cqhttp.Cyan.Messages.CQElements.Base.Element.#ctor
  name: Element
  nameWithType: Element.Element
  fullName: cqhttp.Cyan.Messages.CQElements.Base.Element.Element
- uid: System.ValueTuple{System.String,System.String}[]
  isExternal: true
  name: ValueTuple<String, String>[]
  nameWithType: ValueTuple<String, String>[]
  fullName: System.ValueTuple<System.String, System.String>[]
  nameWithType.vb: ValueTuple(Of String, String)()
  fullName.vb: System.ValueTuple(Of System.String, System.String)()
  name.vb: ValueTuple(Of String, String)()
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
